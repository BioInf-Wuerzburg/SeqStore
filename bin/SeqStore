#!/usr/bin/perl
package SeqStore;

use warnings;
no warnings 'qw';
use strict;

use Carp;
use Log::Log4perl qw(:easy :no_extra_logdie_message);

use Getopt::Long;
use Pod::Usage;
use Data::Dumper;

use Cwd;

use Bio::DB::Fasta;
use Fasta::Parser;
use Fasta::Seq;


our $VERSION = '0.02';


=head1 Changelog

=cut

=head2 0.02

=over

=item [Feature] C<$SeqStore::Warn_nonexising_id> with default 1. Disable
warnings for nonexisting ids.

=item [BugFix] C<get_seq()> handles provided id correctly.

=item [Feature] Tests

=item [Feature] SeqStore uses Fasta::Seq instead of Bio::Seq stuff. 
C<get_seq()> returns single Fasta::Seq objects from store.

=item [Feature] Accessors etc.

=item [Refacture] SeqStore uses instances. C<init()> is replaced by C<new()>. 

=back

=cut


##------------------------------------------------------------------------##

my $L = Log::Log4perl::get_logger();

# globals
my $cmd; # global var for current cmd

# keys are used in both modes to determine valid 
# commands
# values are only relevant for GetOpt parsing in
# exec mode
my $cmd_opt = {            
	new => [qw(glob|g=s path|p=s)],     
	fetch => [qw(a=s)],    
};                         


our $Warn_nonexisting_id = 1;


# run _Main if modulino is used as executable
__PACKAGE__->_Main(@ARGV) unless caller;


##------------------------------------------------------------------------##


sub new{
	my $proto = shift;
	my $self;
	my $class;
	
	# object method -> clone + overwrite
	if($class = ref $proto){ 
		return bless ({%$proto, @_}, $class);
	}else{
		$class = $proto;
	}

	$L->info("Initializing");
	
	# opt
	$self = {
		db => undef,
		glob => undef,
		ids_fh => undef,
		out_fh => undef,
		reindex => 0,
		@_%2 ? (path => shift) : (),
		@_
	};
	
	bless $self, $class;
	
	# args
	$L->logdie("Store file or location required") unless $self->path;	

	if(-d $self->path && -e 'directory.index' or -e $self->path.".index"){
		if($self->reindex){
			$L->info("Reindexing data");
			$self->db(
				Bio::DB::Fasta->new(
				$self->path, 
				$self->glob ? ('-glob' => $self->glob) : (),
				'-reindex' => 1,
			));
		}else{
			$L->info("Loading index");
			$self->db(
				Bio::DB::Fasta->new(
				$self->path, 
			));
		}
	}else{
		$L->info("Indexing data");
			$self->db(
				Bio::DB::Fasta->new(
				$self->path, 
				$self->glob ? ('-glob' => $self->glob) : (),
			));
	}

	$L->info("Indexed ". scalar $self->db->ids . " FASTA sequences");
	return $self; # void
}

sub fetch{
	my $proto = shift;
	my $self;
	my $class;
	
	# class method in modulino mode
	if($class = ref $proto){ 
		$self = {%$proto, @_};
		bless $self, $class;
	}else{
		$class = $proto;
		$self = $class->new(
			ids_fh => \*STDIN,
			out_fh => \*STDOUT,
			@_%2 ? (path => shift) : (),
			@_
		);
	}
	
	$L->info("Fetching");

	my @re;
	my $ifh = $self->ids_fh;
	my $ofh = $self->out_fh;
	if($ifh && $ofh){ # exec mode
		# print stringified fasta versions
		while(<$ifh>){
			chomp();
			my $seq = $self->get_seq($_);
			print $ofh "$seq" if $seq;
		}
	}elsif($ifh){
		my $ifh = $self->ids_fh;
		while(<$ifh>){
			chomp();
			my $seq = $self->get_seq($_);
			push @re, $seq if $seq;	
		}
	}elsif($ofh){
		foreach (@{$self->ids}){
			my $seq = $self->get_seq($_);
			print $ofh "$seq" if $seq;			
		}
	}else{
		foreach (@{$self->ids}){
			my $seq = $self->get_seq($_);
			push @re, $seq if $seq;
		}
	}
	return @re;
}


##------------------------------------------------------------------------##
# modulino as executable stuff

sub _Main{
	my $class = shift;
	
	# init a root logger in exec mode
	Log::Log4perl->init(\q(
		log4perl.rootLogger					= DEBUG, Screen
		log4perl.appender.Screen			= Log::Log4perl::Appender::Screen
		log4perl.appender.Screen.stderr		= 1
		log4perl.appender.Screen.layout		= PatternLayout
		log4perl.appender.Screen.layout.ConversionPattern = [%d{MM-dd HH:mm:ss}] [%C] %m%n
	));
	
	
	# get and check command
	$class->_cmd();
	
	# get and check options/parameter
	my %opt;
	GetOptions(\%opt, $class->_cmd_opt) or exit(255);
	
	return $class->$cmd(@ARGV, %opt);
	
}


sub _cmd{
	my $proto = shift;
	$cmd = shift @ARGV;
	pod2usage("Command required") unless $cmd;
	pod2usage("Unknown command") unless grep{$_ eq $cmd}keys %{$cmd_opt};
}

sub _cmd_opt{
	#my $proto = shift;
	return @{$cmd_opt->{$cmd}};
}


##------------------------------------------------------------------------##
# Accessors

sub path{
	my ($self, $path) = @_;
	if(defined $path){
		$self->{path} = $path;
	}
	return $self->{path};
}

sub glob{
	my ($self, $glob) = @_;
	if(defined $glob){
		$self->{glob} = $glob;
	}
	return $self->{glob};
}

sub db{
	my ($self, $db) = @_;
	if(defined $db){
		$self->{db} = $db;
	}
	return $self->{db};
}

sub out_fh{
	my ($self, $out_fh) = @_;
	if(defined $out_fh){
		$self->{out_fh} = $out_fh;
	}
	return $self->{out_fh};
}

sub ids_fh{
	my ($self, $ids_fh) = @_;
	if(defined $ids_fh){
		$self->{ids_fh} = $ids_fh;
	}
	return $self->{ids_fh};
}

sub ids{
	my ($self, $ids) = @_;
	if(defined $ids){
		$self->{ids} = $ids;
	}
	return $self->{ids};
}

sub reindex{
	my ($self, $reindex) = @_;
	if(defined $reindex){
		$self->{reindex} = $reindex;
	}
	return $self->{reindex};
}

##------------------------------------------------------------------------##
# Methods

sub get_seq{
	my ($self, $id) = @_;
	my ($h, $s) = ($self->db->header($id), $self->db->seq($id));
	unless($h){
		$L->warn("ID not in store: $id") if $Warn_nonexisting_id;
		return;
	}
	
	return Fasta::Seq->new(
		seq_head => $h, 
		seq => $s
	);
}


1;







